#!/usr/bin/env ruby

$:.unshift File.dirname(__FILE__)

require 'optparse'
require 'functions'
require 'probe'


OptionParser.new do |opts|
  opts.banner = "Usage: scythe [options]"

  opts.on("-g", 
          "--gather <project-directory>", 
          "gather probes from source code directory") do |dir|

    unless probe_env_var && File.directory?(probe_env_var)
      STDERR.puts "scythe: environment variable SCYTHE_PROBE_DIR not set"
      exit(1)
    end


    unless dir && File.directory?(dir) 
      STDERR.puts "scythe: -g option requires a valid directory argument"
      exit(1)
    end

    project_dir = File.expand_path(dir) 

    probe_markers =
      file_names(project_dir).grep(/[\.rb$ \.py$]/)
                             .flat_map {|fn| markers(fn) }
    
    duplicated_markers =
      probe_markers.group_by {|m| m }
                   .select {|_,ms| ms.count >= 2 }
                   .keys

    unless duplicated_markers.empty?
      STDERR.puts "scythe: the following probes found more than once in #{project_dir}:\n"
      STDERR.puts "\n#{duplicated_markers.join($/)}\n\n" 
      exit(1)
    end

    removed_markers = get_probes(probe_dir).map(&:name) - probe_markers.uniq

    unless removed_markers.empty?
      STDERR.puts "scythe: the following probes were not found in #{project_dir}"
      STDERR.puts "  Consider deleting them with -d:"
      STDERR.puts "\n#{removed_markers.join($/)}\n\n"
    end

    probe_markers.uniq.each do |marker|
      record_probe(marker)
    end
  end


  opts.on("-d",
          "--delete <probe-name>",
          "delete a probe") do |probe_name|


    unless probe_env_var && File.directory?(probe_env_var)
      STDERR.puts "scythe: environment variable SCYTHE_PROBE_DIR not set"
      exit(1)
    end

    probes = get_probes(probe_dir) 

    if probes.map(&:name).select {|n| n == probe_name }.empty?
      STDERR.puts "scythe: unable to find probe #{probe_name}"
      exit(1)
    end

    delete_probe(probe_name)

  end
          
  opts.on("-s [secs | h]",
          "--status [secs | h]",
          "shows the elapsed time since the last call for each probe (in days).",
          "secs: show time in seconds", 
          "h: show time in hours") do |format|


    unless probe_env_var && File.directory?(probe_env_var)
      STDERR.puts "scythe: environment variable SCYTHE_PROBE_DIR not set"
      exit(1)
    end


    now = Time.now.to_i

    case format 
      when "secs"
        reporting_interval = :seconds
      when "hours"
        reporting_interval = :hours
      else
        reporting_interval = :days
    end
    probes = get_probes(probe_dir) 

    probes.map {|probe| [probe.name, probe.silent?(now, reporting_interval)]}
          .sort_by {|name, elapsed| [-elapsed, name] }
          .each do |name, elapsed|
            puts "%-30s %6d" % [name, elapsed]
          end
    
  end

end.parse!



